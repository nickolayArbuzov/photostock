generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  username          String            @unique
  email             String            @unique
  createdAt         String
  credInfo          CredInfoUser?
  tokenInfo         TokenInfoUser[]
  profileInfo       ProfileInfoUser?
  banInfoUser       BanInfoUser?
  paymentsInfo      PaymentsInfoUser[]
  posts             Posts[]
  postsLikes        PostLikes[]
  comments          Comments[]
  commentLikes      CommentLikes[]
}

model CredInfoUser {
  id                Int               @id @default(autoincrement())
  passwordHash      String
  isActivated       Boolean
  code              String
  codeExpiresAt     DateTime
  recoveryIsUsed    Boolean
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int               @unique
}

model TokenInfoUser {
  id                Int               @id @default(autoincrement())
  deviceIp          String
  deviceName        String
  deviceId          String
  issuedAt          Int
  expirationAt      Int
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
}

model ProfileInfoUser {
  id                Int               @id @default(autoincrement())
  firstName         String?
  lastName          String?
  birthday          DateTime?
  city              String?
  aboutMe           String?
  profilePhoto      Files?
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int               @unique
}

model BanInfoUser {
  id                Int               @id @default(autoincrement())
  banStatus         Boolean
  banReason         String
  banDate           String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int               @unique
}

model Posts {
  id                Int               @id @default(autoincrement())
  description       String?
  postPhotoLinks    String[]
  createdAt         String
  updatedAt         String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  postsLikes        PostLikes[]
  comments          Comments[]
}

enum fileType {
  avatar
  post_image
}
enum fileStatus {
  uploaded
  deleted
}
model Files {
  id                Int               @id @default(autoincrement())
  profile           ProfileInfoUser?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId         Int?              @unique
  keys              FileKeys[]
  sizeInBytes       Int?
  type              fileType?
  status            fileStatus?
  extension         String?
  mimeType          String?
}

enum resolutions {
  thumbnail
  original
}
model FileKeys {
  id                Int               @id @default(autoincrement())
  file              Files?            @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId            Int?
  resolution        resolutions?
  key               String?
}

enum paymentService {
  stripe
  paypal
  roboKassa
}
model PaymentsInfoUser {
  id                Int               @id @default(autoincrement())
  paymentMethodId   String
  customerId        String
  paymentService    paymentService
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int               
  payments          Payments[]
}

model Payments {
  id                Int               @id @default(autoincrement())
  periodStart       Int
  periodEnd         Int
  amount            Int
  currency          String
  product           String
  paymentInfo       PaymentsInfoUser  @relation(fields: [paymentInfoId], references: [id], onDelete: Cascade)
  paymentInfoId     Int               
}

model PostLikes {
  id                Int               @id @default(autoincrement())
  createdAt         String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int           
  post              Posts             @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId            Int    
}

model Comments {
  id                Int               @id @default(autoincrement())
  text              String
  createdAt         String
  postId            Int
  post              Posts             @relation(fields: [postId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  commentLikes      CommentLikes[]
}

model CommentLikes {
  id                Int               @id @default(autoincrement())
  createdAt         String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  comment           Comments          @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId         Int
}